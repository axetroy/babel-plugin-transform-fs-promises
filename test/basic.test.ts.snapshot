exports[`transform-fs-promises > const fs = import("fs/promises"); 1`] = `
### Input

      1 | const fs = import("fs/promises");

### Output

      1 | const fs = import("fs").then(m => m.promises);
`;

exports[`transform-fs-promises > const fs = require("fs/promises"); 1`] = `
### Input

      1 | const fs = require("fs/promises");

### Output

      1 | const fs = require("fs").promises;
`;

exports[`transform-fs-promises > const { readFile } = require("fs/promises"); 1`] = `
### Input

      1 | const { readFile } = require("fs/promises");

### Output

      1 | const {
      2 |   readFile
      3 | } = require("fs").promises;
`;

exports[`transform-fs-promises > const { readFile, stat } = require("fs/promises"); 1`] = `
### Input

      1 | const { readFile, stat } = require("fs/promises");

### Output

      1 | const {
      2 |   readFile,
      3 |   stat
      4 | } = require("fs").promises;
`;

exports[`transform-fs-promises > import fs from "fs/promises"; 1`] = `
### Input

      1 | import fs from "fs/promises";

### Output

      1 | import { promises as fs } from "fs";
`;

exports[`transform-fs-promises > import fs, { readFile } from "fs/promises"; 1`] = `
### Input

      1 | import fs, { readFile } from "fs/promises";

### Output

      1 | import fs, { promises as _promises_no_conflict_alias } from "fs";
      2 | const {
      3 |   readFile
      4 | } = _promises_no_conflict_alias;
`;

exports[`transform-fs-promises > import { readFile } from "fs/promises"; 1`] = `
### Input

      1 | import { readFile } from "fs/promises";

### Output

      1 | import { promises as _promises_no_conflict_alias } from "fs";
      2 | const {
      3 |   readFile
      4 | } = _promises_no_conflict_alias;
`;

exports[`transform-fs-promises > import { readFile, stat } from "fs/promises"; 1`] = `
### Input

      1 | import { readFile, stat } from "fs/promises";

### Output

      1 | import { promises as _promises_no_conflict_alias } from "fs";
      2 | const {
      3 |   readFile,
      4 |   stat
      5 | } = _promises_no_conflict_alias;
`;
